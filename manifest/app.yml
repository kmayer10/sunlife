apiVersion: apps/v1
kind: Deployment
metadata: 
  name: app
  namespace: 2tier
  labels:
    app: app
spec:
  template:
    metadata:
      labels:
        app: nodejs
    spec:
      containers: 
      - name: app
        image: kulbhushanmayer/nodejs-app:v1
        ports:
        - containerPort: 4000
          name: app
        envFrom:
        - configMapRef:
            name: db
        - secretRef:
            name: db-pwd
      initContainers: ## These are short term pods got executed before starting the main application containers
      - name: db-setup
        image: kulbhushanmayer/nodejs-app:database-setup
        command:
        - "sh"
        - "-c"
        - "sh database_setup.sh && sleep 30"
        envFrom:
        - configMapRef:
            name: db
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: db-pwd
              key: DB_PWD
  replicas: 2
  selector:
    matchLabels:
      app: nodejs

## UPDATE 1 - Created ENV Variables using ConfigMap & Secret
# kubectl apply -f app.yml
# kubectl exec -it -n 2tier pod-name -- printenv
# kubectl logs -n 2tier pod-name
## UPDATE 2 - Added initContainers to check the availability of DB & Table needed for application and to create them if doesn't exists
# git pull origin 
# kubectl apply -f app.yml
# kubectl logs -n 2tier pod-name
# kubectl logs -n 2tier pod-name -c db-setup

---
apiVersion: v1
kind: Service
metadata:
  name: app
  namespace: 2tier
spec:
  type: NodePort
  ports:
  - name: app
    port: 80
    targetPort: app
    nodePort: 30000
    protocol: TCP
  selector:
    app: nodejs

# git pull origin
# git apply -f app.yml
#  try to access application using browser with url http://localhost:30000
